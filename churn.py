# -*- coding: utf-8 -*-
"""churn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CgYnGD8pK5gAt29DtxfhUubhNdcfKsvc
"""

import numpy as np
import pickle
import pandas as pd
import streamlit as st

from PIL import Image

pickle_in = open("classifier.pkl","rb")
classifier=pickle.load(pickle_in)

#@app.route('/')
def welcome():
    return "Welcome All"

#@app.route('/predict',methods=["Get"])

def predict_note_authentication(Age,Gender,Location,Subscription_Length_Months,Monthly_Bill, Total_Usage_GB):
  feat_list = np.array([[Age,Gender,Location,Subscription_Length_Months,Monthly_Bill, Total_Usage_GB]], dtype=object)
  prediction=classifier.predict(feat_list)
  print(prediction)
  if (prediction[0]==0):
    return 'the customers has not churn'
  else:
    return 'the customers has been churned'


def main():
  image2 = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScH7E1EXIo1ZphKFXpqkWNFX5OA-JYB8g5tw&usqp=CAU'
  image = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQT4xf_3hVeSgHEb2YGbvBerVIX_oJJxEZKNWeti8TrSat3-Y-wJyVZAGc1vSt3za4y1TM&usqp=CAU'
  st.image(image,use_column_width=False)

  add_selectbox = st.sidebar.selectbox("How would you like to predict?",("Online", "Batch"))
  st.sidebar.info('''the feature name and order must be in same of below [[Age,Gender,Location,Subscription_Length_Months,Monthly_Bill, Total_Usage_GB]] ''')
  st.sidebar.image(image2)
  st.title("Predicting Customer Churn")
  html_temp = """
    <div style="background-color:tomato;padding:10px">
    <h2 style="color:white;text-align:center;">Telecom churn rate ML App </h2>
    </div>
    """
  if add_selectbox == 'Online':
      st.markdown(html_temp,unsafe_allow_html=True)
      Age = st.text_input("Age",key ="Age")
      Gender = st.selectbox('Gender 1 is male or 0 is Female', ['1', '0'])
      Location = st.selectbox('Location 0 is Los Angeles ,or 1 is New York,or 2 is Houston, or 3 is Chicago ,or 4 is Miami', ['0', '1','2','3','4'])
      Subscription_Length_Months = st.text_input("Subscription_Length_Months",key ="Subscription_Length_Months")
      Monthly_Bill = st.text_input("Monthly_Bill",key ="Monthly_Bill")
      Total_Usage_GB = st.text_input("Total_Usage_GB",key ="Total_Usage_GB")

      result=""
      if st.button("Predict"):
          result=predict_note_authentication(Age,Gender,Location,Subscription_Length_Months,Monthly_Bill, Total_Usage_GB)
      st.success('{}'.format(result))
  if add_selectbox == 'Batch':
    file_upload = st.file_uploader("Upload csv file for predictions", type=["csv"])
    if file_upload is not None:
      data = pd.read_csv(file_upload,encoding= 'unicode_escape')
      result=classifier.predict(data)
      st.success('The output is {}'.format(result))
      result1 = pd.DataFrame(result)
      data['churn'] = result1
      data['churn'] = data['churn'].replace(0, 'not churn')
      data['churn'] = data['churn'].replace(1, 'churn')
      st.download_button(label='download csv',data=data.to_csv(),mime='text/csv')

if __name__=='__main__':
    main()